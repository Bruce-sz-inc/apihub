// This file was generated by counterfeiter
package apihubfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/apihub/apihub"
)

type FakeServicePublisher struct {
	PublishStub        func(logger lager.Logger, prefix string, spec apihub.ServiceSpec) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		logger lager.Logger
		prefix string
		spec   apihub.ServiceSpec
	}
	publishReturns struct {
		result1 error
	}
	UnpublishStub        func(logger lager.Logger, prefix string, host string) error
	unpublishMutex       sync.RWMutex
	unpublishArgsForCall []struct {
		logger lager.Logger
		prefix string
		host   string
	}
	unpublishReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServicePublisher) Publish(logger lager.Logger, prefix string, spec apihub.ServiceSpec) error {
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		logger lager.Logger
		prefix string
		spec   apihub.ServiceSpec
	}{logger, prefix, spec})
	fake.recordInvocation("Publish", []interface{}{logger, prefix, spec})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(logger, prefix, spec)
	} else {
		return fake.publishReturns.result1
	}
}

func (fake *FakeServicePublisher) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeServicePublisher) PublishArgsForCall(i int) (lager.Logger, string, apihub.ServiceSpec) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].logger, fake.publishArgsForCall[i].prefix, fake.publishArgsForCall[i].spec
}

func (fake *FakeServicePublisher) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServicePublisher) Unpublish(logger lager.Logger, prefix string, host string) error {
	fake.unpublishMutex.Lock()
	fake.unpublishArgsForCall = append(fake.unpublishArgsForCall, struct {
		logger lager.Logger
		prefix string
		host   string
	}{logger, prefix, host})
	fake.recordInvocation("Unpublish", []interface{}{logger, prefix, host})
	fake.unpublishMutex.Unlock()
	if fake.UnpublishStub != nil {
		return fake.UnpublishStub(logger, prefix, host)
	} else {
		return fake.unpublishReturns.result1
	}
}

func (fake *FakeServicePublisher) UnpublishCallCount() int {
	fake.unpublishMutex.RLock()
	defer fake.unpublishMutex.RUnlock()
	return len(fake.unpublishArgsForCall)
}

func (fake *FakeServicePublisher) UnpublishArgsForCall(i int) (lager.Logger, string, string) {
	fake.unpublishMutex.RLock()
	defer fake.unpublishMutex.RUnlock()
	return fake.unpublishArgsForCall[i].logger, fake.unpublishArgsForCall[i].prefix, fake.unpublishArgsForCall[i].host
}

func (fake *FakeServicePublisher) UnpublishReturns(result1 error) {
	fake.UnpublishStub = nil
	fake.unpublishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServicePublisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.unpublishMutex.RLock()
	defer fake.unpublishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServicePublisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apihub.ServicePublisher = new(FakeServicePublisher)
