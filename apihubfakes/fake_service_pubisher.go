// This file was generated by counterfeiter
package apihubfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/apihub/apihub"
)

type FakeServicePubisher struct {
	PublishStub        func(logger lager.Logger, config apihub.ServiceConfig) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		logger lager.Logger
		config apihub.ServiceConfig
	}
	publishReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServicePubisher) Publish(logger lager.Logger, config apihub.ServiceConfig) error {
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		logger lager.Logger
		config apihub.ServiceConfig
	}{logger, config})
	fake.recordInvocation("Publish", []interface{}{logger, config})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(logger, config)
	} else {
		return fake.publishReturns.result1
	}
}

func (fake *FakeServicePubisher) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeServicePubisher) PublishArgsForCall(i int) (lager.Logger, apihub.ServiceConfig) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].logger, fake.publishArgsForCall[i].config
}

func (fake *FakeServicePubisher) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServicePubisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServicePubisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apihub.ServicePubisher = new(FakeServicePubisher)
