// This file was generated by counterfeiter
package apihubfakes

import (
	"sync"

	"github.com/apihub/apihub"
)

type FakeBackend struct {
	AddServiceStub        func(apihub.Service) error
	addServiceMutex       sync.RWMutex
	addServiceArgsForCall []struct {
		arg1 apihub.Service
	}
	addServiceReturns struct {
		result1 error
	}
	RemoveServiceStub        func(handle string) (apihub.Service, error)
	removeServiceMutex       sync.RWMutex
	removeServiceArgsForCall []struct {
		handle string
	}
	removeServiceReturns struct {
		result1 apihub.Service
		result2 error
	}
	ServicesStub        func() ([]apihub.Service, error)
	servicesMutex       sync.RWMutex
	servicesArgsForCall []struct{}
	servicesReturns     struct {
		result1 []apihub.Service
		result2 error
	}
	LookupStub        func(handle string) (apihub.Service, error)
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		handle string
	}
	lookupReturns struct {
		result1 apihub.Service
		result2 error
	}
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
	startReturns     struct {
		result1 error
	}
	StopStub        func() error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct{}
	stopReturns     struct {
		result1 error
	}
}

func (fake *FakeBackend) AddService(arg1 apihub.Service) error {
	fake.addServiceMutex.Lock()
	fake.addServiceArgsForCall = append(fake.addServiceArgsForCall, struct {
		arg1 apihub.Service
	}{arg1})
	fake.addServiceMutex.Unlock()
	if fake.AddServiceStub != nil {
		return fake.AddServiceStub(arg1)
	} else {
		return fake.addServiceReturns.result1
	}
}

func (fake *FakeBackend) AddServiceCallCount() int {
	fake.addServiceMutex.RLock()
	defer fake.addServiceMutex.RUnlock()
	return len(fake.addServiceArgsForCall)
}

func (fake *FakeBackend) AddServiceArgsForCall(i int) apihub.Service {
	fake.addServiceMutex.RLock()
	defer fake.addServiceMutex.RUnlock()
	return fake.addServiceArgsForCall[i].arg1
}

func (fake *FakeBackend) AddServiceReturns(result1 error) {
	fake.AddServiceStub = nil
	fake.addServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) RemoveService(handle string) (apihub.Service, error) {
	fake.removeServiceMutex.Lock()
	fake.removeServiceArgsForCall = append(fake.removeServiceArgsForCall, struct {
		handle string
	}{handle})
	fake.removeServiceMutex.Unlock()
	if fake.RemoveServiceStub != nil {
		return fake.RemoveServiceStub(handle)
	} else {
		return fake.removeServiceReturns.result1, fake.removeServiceReturns.result2
	}
}

func (fake *FakeBackend) RemoveServiceCallCount() int {
	fake.removeServiceMutex.RLock()
	defer fake.removeServiceMutex.RUnlock()
	return len(fake.removeServiceArgsForCall)
}

func (fake *FakeBackend) RemoveServiceArgsForCall(i int) string {
	fake.removeServiceMutex.RLock()
	defer fake.removeServiceMutex.RUnlock()
	return fake.removeServiceArgsForCall[i].handle
}

func (fake *FakeBackend) RemoveServiceReturns(result1 apihub.Service, result2 error) {
	fake.RemoveServiceStub = nil
	fake.removeServiceReturns = struct {
		result1 apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeBackend) Services() ([]apihub.Service, error) {
	fake.servicesMutex.Lock()
	fake.servicesArgsForCall = append(fake.servicesArgsForCall, struct{}{})
	fake.servicesMutex.Unlock()
	if fake.ServicesStub != nil {
		return fake.ServicesStub()
	} else {
		return fake.servicesReturns.result1, fake.servicesReturns.result2
	}
}

func (fake *FakeBackend) ServicesCallCount() int {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return len(fake.servicesArgsForCall)
}

func (fake *FakeBackend) ServicesReturns(result1 []apihub.Service, result2 error) {
	fake.ServicesStub = nil
	fake.servicesReturns = struct {
		result1 []apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeBackend) Lookup(handle string) (apihub.Service, error) {
	fake.lookupMutex.Lock()
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		handle string
	}{handle})
	fake.lookupMutex.Unlock()
	if fake.LookupStub != nil {
		return fake.LookupStub(handle)
	} else {
		return fake.lookupReturns.result1, fake.lookupReturns.result2
	}
}

func (fake *FakeBackend) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeBackend) LookupArgsForCall(i int) string {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.lookupArgsForCall[i].handle
}

func (fake *FakeBackend) LookupReturns(result1 apihub.Service, result2 error) {
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeBackend) Start() error {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub()
	} else {
		return fake.startReturns.result1
	}
}

func (fake *FakeBackend) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeBackend) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) Stop() error {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub()
	} else {
		return fake.stopReturns.result1
	}
}

func (fake *FakeBackend) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeBackend) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

var _ apihub.Backend = new(FakeBackend)
