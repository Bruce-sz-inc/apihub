// This file was generated by counterfeiter
package apihubfakes

import (
	"sync"
	"time"

	"github.com/apihub/apihub"
)

type FakeService struct {
	HandleStub        func() string
	handleMutex       sync.RWMutex
	handleArgsForCall []struct{}
	handleReturns     struct {
		result1 string
	}
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
	startReturns     struct {
		result1 error
	}
	StopStub        func(kill bool) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		kill bool
	}
	stopReturns struct {
		result1 error
	}
	InfoStub        func() (apihub.ServiceInfo, error)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct{}
	infoReturns     struct {
		result1 apihub.ServiceInfo
		result2 error
	}
	AddBackendStub        func(be apihub.Backend) error
	addBackendMutex       sync.RWMutex
	addBackendArgsForCall []struct {
		be apihub.Backend
	}
	addBackendReturns struct {
		result1 error
	}
	RemoveBackendStub        func(be apihub.Backend) error
	removeBackendMutex       sync.RWMutex
	removeBackendArgsForCall []struct {
		be apihub.Backend
	}
	removeBackendReturns struct {
		result1 error
	}
	SetTimeoutStub        func(time.Duration)
	setTimeoutMutex       sync.RWMutex
	setTimeoutArgsForCall []struct {
		arg1 time.Duration
	}
	TimeoutStub        func() time.Duration
	timeoutMutex       sync.RWMutex
	timeoutArgsForCall []struct{}
	timeoutReturns     struct {
		result1 time.Duration
	}
}

func (fake *FakeService) Handle() string {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct{}{})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		return fake.HandleStub()
	} else {
		return fake.handleReturns.result1
	}
}

func (fake *FakeService) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeService) HandleReturns(result1 string) {
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeService) Start() error {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub()
	} else {
		return fake.startReturns.result1
	}
}

func (fake *FakeService) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeService) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Stop(kill bool) error {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		kill bool
	}{kill})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub(kill)
	} else {
		return fake.stopReturns.result1
	}
}

func (fake *FakeService) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeService) StopArgsForCall(i int) bool {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.stopArgsForCall[i].kill
}

func (fake *FakeService) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Info() (apihub.ServiceInfo, error) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct{}{})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub()
	} else {
		return fake.infoReturns.result1, fake.infoReturns.result2
	}
}

func (fake *FakeService) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeService) InfoReturns(result1 apihub.ServiceInfo, result2 error) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 apihub.ServiceInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeService) AddBackend(be apihub.Backend) error {
	fake.addBackendMutex.Lock()
	fake.addBackendArgsForCall = append(fake.addBackendArgsForCall, struct {
		be apihub.Backend
	}{be})
	fake.addBackendMutex.Unlock()
	if fake.AddBackendStub != nil {
		return fake.AddBackendStub(be)
	} else {
		return fake.addBackendReturns.result1
	}
}

func (fake *FakeService) AddBackendCallCount() int {
	fake.addBackendMutex.RLock()
	defer fake.addBackendMutex.RUnlock()
	return len(fake.addBackendArgsForCall)
}

func (fake *FakeService) AddBackendArgsForCall(i int) apihub.Backend {
	fake.addBackendMutex.RLock()
	defer fake.addBackendMutex.RUnlock()
	return fake.addBackendArgsForCall[i].be
}

func (fake *FakeService) AddBackendReturns(result1 error) {
	fake.AddBackendStub = nil
	fake.addBackendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) RemoveBackend(be apihub.Backend) error {
	fake.removeBackendMutex.Lock()
	fake.removeBackendArgsForCall = append(fake.removeBackendArgsForCall, struct {
		be apihub.Backend
	}{be})
	fake.removeBackendMutex.Unlock()
	if fake.RemoveBackendStub != nil {
		return fake.RemoveBackendStub(be)
	} else {
		return fake.removeBackendReturns.result1
	}
}

func (fake *FakeService) RemoveBackendCallCount() int {
	fake.removeBackendMutex.RLock()
	defer fake.removeBackendMutex.RUnlock()
	return len(fake.removeBackendArgsForCall)
}

func (fake *FakeService) RemoveBackendArgsForCall(i int) apihub.Backend {
	fake.removeBackendMutex.RLock()
	defer fake.removeBackendMutex.RUnlock()
	return fake.removeBackendArgsForCall[i].be
}

func (fake *FakeService) RemoveBackendReturns(result1 error) {
	fake.RemoveBackendStub = nil
	fake.removeBackendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) SetTimeout(arg1 time.Duration) {
	fake.setTimeoutMutex.Lock()
	fake.setTimeoutArgsForCall = append(fake.setTimeoutArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.setTimeoutMutex.Unlock()
	if fake.SetTimeoutStub != nil {
		fake.SetTimeoutStub(arg1)
	}
}

func (fake *FakeService) SetTimeoutCallCount() int {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	return len(fake.setTimeoutArgsForCall)
}

func (fake *FakeService) SetTimeoutArgsForCall(i int) time.Duration {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	return fake.setTimeoutArgsForCall[i].arg1
}

func (fake *FakeService) Timeout() time.Duration {
	fake.timeoutMutex.Lock()
	fake.timeoutArgsForCall = append(fake.timeoutArgsForCall, struct{}{})
	fake.timeoutMutex.Unlock()
	if fake.TimeoutStub != nil {
		return fake.TimeoutStub()
	} else {
		return fake.timeoutReturns.result1
	}
}

func (fake *FakeService) TimeoutCallCount() int {
	fake.timeoutMutex.RLock()
	defer fake.timeoutMutex.RUnlock()
	return len(fake.timeoutArgsForCall)
}

func (fake *FakeService) TimeoutReturns(result1 time.Duration) {
	fake.TimeoutStub = nil
	fake.timeoutReturns = struct {
		result1 time.Duration
	}{result1}
}

var _ apihub.Service = new(FakeService)
