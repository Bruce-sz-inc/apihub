// This file was generated by counterfeiter
package apihubfakes

import (
	"sync"

	"github.com/apihub/apihub"
)

type FakeClient struct {
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns     struct {
		result1 error
	}
	AddServiceStub        func(apihub.ServiceSpec) (apihub.Service, error)
	addServiceMutex       sync.RWMutex
	addServiceArgsForCall []struct {
		arg1 apihub.ServiceSpec
	}
	addServiceReturns struct {
		result1 apihub.Service
		result2 error
	}
	RemoveServiceStub        func(handle string) error
	removeServiceMutex       sync.RWMutex
	removeServiceArgsForCall []struct {
		handle string
	}
	removeServiceReturns struct {
		result1 error
	}
	ServicesStub        func() ([]apihub.Service, error)
	servicesMutex       sync.RWMutex
	servicesArgsForCall []struct{}
	servicesReturns     struct {
		result1 []apihub.Service
		result2 error
	}
	LookupStub        func(handle string) (apihub.Service, error)
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		handle string
	}
	lookupReturns struct {
		result1 apihub.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Ping() error {
	fake.pingMutex.Lock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	} else {
		return fake.pingReturns.result1
	}
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingReturns(result1 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) AddService(arg1 apihub.ServiceSpec) (apihub.Service, error) {
	fake.addServiceMutex.Lock()
	fake.addServiceArgsForCall = append(fake.addServiceArgsForCall, struct {
		arg1 apihub.ServiceSpec
	}{arg1})
	fake.recordInvocation("AddService", []interface{}{arg1})
	fake.addServiceMutex.Unlock()
	if fake.AddServiceStub != nil {
		return fake.AddServiceStub(arg1)
	} else {
		return fake.addServiceReturns.result1, fake.addServiceReturns.result2
	}
}

func (fake *FakeClient) AddServiceCallCount() int {
	fake.addServiceMutex.RLock()
	defer fake.addServiceMutex.RUnlock()
	return len(fake.addServiceArgsForCall)
}

func (fake *FakeClient) AddServiceArgsForCall(i int) apihub.ServiceSpec {
	fake.addServiceMutex.RLock()
	defer fake.addServiceMutex.RUnlock()
	return fake.addServiceArgsForCall[i].arg1
}

func (fake *FakeClient) AddServiceReturns(result1 apihub.Service, result2 error) {
	fake.AddServiceStub = nil
	fake.addServiceReturns = struct {
		result1 apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RemoveService(handle string) error {
	fake.removeServiceMutex.Lock()
	fake.removeServiceArgsForCall = append(fake.removeServiceArgsForCall, struct {
		handle string
	}{handle})
	fake.recordInvocation("RemoveService", []interface{}{handle})
	fake.removeServiceMutex.Unlock()
	if fake.RemoveServiceStub != nil {
		return fake.RemoveServiceStub(handle)
	} else {
		return fake.removeServiceReturns.result1
	}
}

func (fake *FakeClient) RemoveServiceCallCount() int {
	fake.removeServiceMutex.RLock()
	defer fake.removeServiceMutex.RUnlock()
	return len(fake.removeServiceArgsForCall)
}

func (fake *FakeClient) RemoveServiceArgsForCall(i int) string {
	fake.removeServiceMutex.RLock()
	defer fake.removeServiceMutex.RUnlock()
	return fake.removeServiceArgsForCall[i].handle
}

func (fake *FakeClient) RemoveServiceReturns(result1 error) {
	fake.RemoveServiceStub = nil
	fake.removeServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Services() ([]apihub.Service, error) {
	fake.servicesMutex.Lock()
	fake.servicesArgsForCall = append(fake.servicesArgsForCall, struct{}{})
	fake.recordInvocation("Services", []interface{}{})
	fake.servicesMutex.Unlock()
	if fake.ServicesStub != nil {
		return fake.ServicesStub()
	} else {
		return fake.servicesReturns.result1, fake.servicesReturns.result2
	}
}

func (fake *FakeClient) ServicesCallCount() int {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return len(fake.servicesArgsForCall)
}

func (fake *FakeClient) ServicesReturns(result1 []apihub.Service, result2 error) {
	fake.ServicesStub = nil
	fake.servicesReturns = struct {
		result1 []apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Lookup(handle string) (apihub.Service, error) {
	fake.lookupMutex.Lock()
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		handle string
	}{handle})
	fake.recordInvocation("Lookup", []interface{}{handle})
	fake.lookupMutex.Unlock()
	if fake.LookupStub != nil {
		return fake.LookupStub(handle)
	} else {
		return fake.lookupReturns.result1, fake.lookupReturns.result2
	}
}

func (fake *FakeClient) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeClient) LookupArgsForCall(i int) string {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.lookupArgsForCall[i].handle
}

func (fake *FakeClient) LookupReturns(result1 apihub.Service, result2 error) {
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 apihub.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.addServiceMutex.RLock()
	defer fake.addServiceMutex.RUnlock()
	fake.removeServiceMutex.RLock()
	defer fake.removeServiceMutex.RUnlock()
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apihub.Client = new(FakeClient)
